datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
    provider = "prisma-client-js"
    // output   = "../node_modules/.prisma/client"
}

// Donation receipt jurisdictions
enum Jurisdiction {
    CRA
    IRS
    // Add additional jurisdictions as needed
}

model Charity {
    id                            String                @id @default(uuid())
    charity_name                  String?
    registration_number           String?
    contact_title                 String?
    contact_first_name            String?
    contact_last_name             String?
    contact_email                 String?               @unique
    contact_mobile_phone          String?               @unique
    charity_sends_receipt         Boolean               @default(false)
    registered_office_address     String?
    date_of_birth                 String?
    city                          String?
    state                         String?
    postCode                      String?
    countryCode                   String?
    wallet_address                String                @unique
    transak_stream_wallet_address String?               @unique
    is_profile_complete           Boolean               @default(false)
    slug                          String?               @unique
    created_at                    DateTime              @default(now())
    donation_receipts             DonationReceipt[]     @relation("CharityDonations")
    charity_fund_transfer         CharityFundTransfer[]

    @@map("charity")
}

model CharityFundTransfer {
    id                 String   @id @default(uuid())
    charity_id         String
    charity            Charity  @relation(fields: [charity_id], references: [id])
    amount_wei         BigInt // Amount in Wei
    fiat_equivalent    Float? // Optional: Fiat value at the time of transfer
    fiat_currency      String? // Optional: Fiat currency code (e.g., USD, CAD)
    transaction_hash   String   @unique
    destination_wallet String
    chain_id           String?
    gas_fee_wei        BigInt? // Optional: Gas fee for transaction
    transfer_reason    String? // Optional: Description of transfer
    created_at         DateTime @default(now())

    @@map("charity_fund_transfer")
}

model Donor {
    id                  String            @id @default(uuid())
    title               String?
    wallet_address      String            @unique
    email               String?           @unique
    first_name          String?
    last_name           String?
    address             String?
    donation_receipts   DonationReceipt[] @relation("DonorDonations")
    is_profile_complete Boolean           @default(false)
    created_at          DateTime          @default(now())
    updated_at          DateTime          @updatedAt

    @@map("donor")
}

model DonationReceipt {
    id                   String       @id @default(uuid())
    receipt_number       String       @unique
    donation_date        DateTime
    fiat_amount          Float
    crypto_amount_wei    BigInt? // Optional
    transaction_hash     String       @unique
    chainId              String? // Optional
    jurisdiction         Jurisdiction @default(CRA)
    jurisdiction_details Json?
    charity_id           String?
    charity              Charity?     @relation("CharityDonations", fields: [charity_id], references: [id])
    donor_id             String?
    donor                Donor?       @relation("DonorDonations", fields: [donor_id], references: [id])
    created_at           DateTime     @default(now())
    updated_at           DateTime     @updatedAt

    @@map("donation_receipt")
}

model DonationReceiptCounter {
    jurisdiction Jurisdiction @id
    counter      Int          @default(0)

    @@map("donation_receipt_counter")
}
