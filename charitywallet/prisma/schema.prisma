datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
    provider = "prisma-client-js"
}

// Donation receipt jurisdictions
enum Jurisdiction {
    CRA
    IRS
    // Add additional jurisdictions as needed
}

model charity {
    id                        String             @id @default(uuid())
    charity_name              String?
    registered_office_address String?
    registration_number       String?
    contact_name              String?
    contact_email             String?
    contact_phone             String?
    wallet_address            String             @unique
    is_profile_complete       Boolean            @default(false)
    slug                      String?            @unique
    created_at                DateTime           @default(now())
    donation_receipts         donation_receipt[]
}

model donor {
    id                  String             @id @default(uuid())
    wallet_address      String             @unique
    email               String?            @unique
    first_name          String?
    last_name           String?
    address             String?
    donation_receipts   donation_receipt[]
    is_profile_complete Boolean            @default(false)
    created_at          DateTime           @default(now())
    updated_at          DateTime           @updatedAt
}

model donation_receipt {
    id                   String       @id @default(uuid())
    receipt_number       String       @unique
    donation_date        DateTime
    fiat_amount          Float
    crypto_amount_wei    BigInt? // Made optional since supabase giving migration error
    transaction_hash     String       @unique
    chainId              String? // Made optional since supabase giving migration error
    jurisdiction         Jurisdiction @default(CRA)
    jurisdiction_details Json?
    charity_id           String?
    charity              charity?     @relation(fields: [charity_id], references: [id])
    donor_id             String?
    donor                donor?       @relation(fields: [donor_id], references: [id])
    created_at           DateTime     @default(now())
    updated_at           DateTime     @updatedAt
}

model donation_receipt_counter {
    jurisdiction Jurisdiction @id
    counter      Int          @default(0)
}

/// Model representing cryptocurrency donations.
model CryptoDonation {
    /// Unique identifier for each donation record.
    id Int @id @default(autoincrement())

    /// Full name of the donor.
    donorName String

    /// Mailing address of the donor.
    donorAddress String

    /// Type of cryptocurrency donated (e.g., Bitcoin, Ethereum).
    cryptoType String

    /// Amount of cryptocurrency donated.
    cryptoAmount Float

    /// Date and time when the cryptocurrency was received.
    donationTimestamp DateTime

    /// Exchange rate applied at the time of conversion from cryptocurrency to CAD.
    conversionRate Float

    /// Equivalent amount in CAD before deducting any transaction fees.
    cadAmount Float

    /// Fees incurred during the conversion process.
    transactionFee Float

    /// Net amount in CAD after deducting transaction fees.
    netCadAmount Float

    /// Indicates whether an official donation receipt has been issued.
    receiptIssued Boolean @default(false)

    /// Unique number of the issued receipt, if applicable.
    receiptNumber String? @unique

    /// Timestamp of when the record was created.
    createdAt DateTime @default(now())

    /// Timestamp of the last update to the record.
    updatedAt DateTime @updatedAt
}
